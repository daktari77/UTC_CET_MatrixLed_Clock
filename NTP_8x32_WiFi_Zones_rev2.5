#include <NTPClient.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <MD_Parola.h>
#include <MD_MAX72xx.h>
#include <SPI.h>

#define HARDWARE_TYPE MD_MAX72XX::FC16_HW
//#define HARDWARE_TYPE MD_MAX72XX::GENERIC_H
#define MAX_DEVICES 20
#define NUM_ZONES   3
//#define ZONE_SIZE (MAX_DEVICES/NUM_ZONES)   // integer multiple works best
#define CLK_PIN   18
#define DATA_PIN  23
#define CS_PIN    5
#define SPEED_TIME  0
#define PAUSE_TIME  0

MD_Parola Display = MD_Parola(HARDWARE_TYPE, DATA_PIN, CLK_PIN, CS_PIN, MAX_DEVICES); //Alias per prefisso

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

// Configurazione WiFi
const char* ssid       = "MARTINET-OUT";
const char* password   = "asdfghjkl";
//

String  hmCET, hmUTC, hour, minute, sec;
String Formatted_date;
long currentMillis = 0;
long previousMillis = 0;
int interval = 1000; // refresh interval

// Time zone const
const int CET = 3600;
const int CEST = 7200;
const int UTC = 0;

// display zone const
const int zCET = 0;
const int zUTC = 1;
const int zTMP = 2;

void setup() {
  Serial.begin(115200);

  Display.begin(NUM_ZONES); //Inizializzo la libreria passando il numero di zone definito ad inizio codice
  // definizione delle zone
  Display.setZone(zCET, 0, 7);   //zona 0 da 0 a 2       //
  Display.setZone(zUTC, 8, 15);  //zone 2 da 8 a 10
  Display.setZone(zTMP, 16, 19); //zona 3 da 11 a 15

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print("Connecting.");
  }
  Serial.print("WiFi connected.");

  Display.setIntensity(0);
  Display.displayClear();
  //Display.setInvert(false); // Inverte il display (true/false)


  Display.displayZoneText(zCET, "CET:", PA_LEFT, SPEED_TIME, 0, PA_PRINT, PA_NO_EFFECT);
  Display.displayZoneText(zUTC, "UTC:", PA_LEFT, SPEED_TIME, 0, PA_PRINT, PA_NO_EFFECT);
  Display.displayZoneText(zTMP, "iu2glr", PA_LEFT, SPEED_TIME, 0, PA_PRINT, PA_NO_EFFECT);            //Zona per Display superiore

  timeClient.begin();
}

void loop()
{
  obtainTime();
}

void obtainTime() {

  while (!timeClient.update()) {
    timeClient.forceUpdate();
  }

  currentMillis = millis();

  if (currentMillis - previousMillis > interval)  {
    previousMillis = millis();
    timeClient.setTimeOffset(UTC);  //Sostituire con UTC,CET,CEST
    Formatted_date = timeClient.getFormattedDate();
    Serial.println(Formatted_date);

    hour = Formatted_date.substring(11, 13);
    minute = Formatted_date.substring(14, 16);
    sec = Formatted_date.substring(17, 19);

    hmUTC = "UTC: " + hour + ":" + minute + ":" + sec;  //Costruisco la stringa con i valori da visualizzare
    //Converte stringa in char array
    int hmUTC_len = hmUTC.length() + 1;
    char myhmUTC[hmUTC_len];
    hmUTC.toCharArray(myhmUTC, hmUTC_len);
    Display.displayZoneText(zUTC, myhmUTC, PA_LEFT, SPEED_TIME, 0, PA_PRINT, PA_NO_EFFECT);        //Zona per -UTC


    timeClient.setTimeOffset(CEST);  //Sostituire con UTC,CET,CEST
    Formatted_date = timeClient.getFormattedDate();
    Serial.println(Formatted_date);

    hour = Formatted_date.substring(11, 13);
    minute = Formatted_date.substring(14, 16);
    sec = Formatted_date.substring(17, 19);

    hmCET = "CET: " + hour + ":" + minute + ":" + sec;   //Costruisco la stringa con i valori da visualizzare
    //Converte stringa in char array
    int hmCET_len = hmCET.length() + 1;
    char myhmCET[hmCET_len];
    hmCET.toCharArray(myhmCET, hmCET_len);

    Display.displayZoneText(zCET, myhmCET, PA_LEFT, SPEED_TIME, 0, PA_PRINT, PA_NO_EFFECT);        //Zona per -CET

    Display.displayAnimate();
  }
}
